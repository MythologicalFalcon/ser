import os
from venv import logger
from xml.dom.minidom import Document
from flask import Flask, request, render_template, jsonify
import firebase_admin
from firebase_admin import credentials, firestore
from google.auth import exceptions
from google.auth import exceptions
from google.cloud import texttospeech
import openai
import pprint
import google.generativeai as palm
import datetime
import logging
from operator import itemgetter
import vertexai
from vertexai.preview.language_models import ChatModel
import chatgeneration as ct

app = Flask(__name__)

# Initialize Firebase Admin SDK with error handling
# Initialize OpenAI API with your API key
logging.basicConfig(filename="AppLogs.log", level=logging.INFO)
openai.api_key = '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'
cred = credentials.Certificate('firebase-credentials.json')
firebase_admin.initialize_app(cred)
        
# Initialize Firestore
db = firestore.client()
messages_ref = db.collection('chat')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/send-message', methods=['POST'])
def send_message():
    logging.info('The user has sent a message : ')
    
    message = request.form['message']
    logging.info(message)
    #response = generatePalmResponse(message)
    response = ct.chat(message)
    logging.info('The response generated by palm is ')
    logging.info(response)
    if firebaseStoring(message,response) == 200:
        logging.info('The message and response has been successfully stored in firebase  ')
    else:
        logging.info('The conversation is not stored in firebase')
    return render_template('index.html')

def generatePalmResponse(userMessage):
    try:
        palm.configure(api_key='AIzaSyB-a2U5Rwv2JVN7_6sq35ZGFug3EuUPfhE')
        models = [m for m in palm.list_models() if 'BERT' in m.supported_generation_methods]
        model = 'models/text-bison-001'
        #model = ChatModel.from_pretrained("chat-bison@001")
        #model = 'models/chat-bison-001'

        completion = palm.generate_text(
        model=model,
        prompt=userMessage,
        temperature=0,
        # The maximum length of the response
        max_output_tokens=800,)
        return (completion.result)
    except Exception as e:
        print(e)


def firebaseStoring(message, response):
    try:
        # Initialize Firebase Admin SDK
        
        logger.info("firebase connection Initialized")
        timestamp = datetime.datetime.now()
        messages_ref.add({'message': message,'response' : response,'timestamp':timestamp})
        return 200
    except Exception as e:
        logging.error(e)
        return 500

# Add a new route to get initial chat messages


@app.route('/get-initial-messages', methods=['GET'])
def get_initial_messages():
    messages_ref = db.collection('chat')
    messages = messages_ref.stream()

    message_list = []
    for message in messages:
        data = message.to_dict()
        if 'message' in data:  # Check if 'message' key exists
            message_list.append({'message': data['message'], 'response': data.get('response'), 'timestamp': data.get('timestamp')})
    
    # Sort the message_list based on the 'timestamp' field
    sorted_messages = sorted(message_list, key=itemgetter('timestamp'))
    
    return jsonify({'messages': sorted_messages})




if __name__ == '__main__':
    app.run(debug=True)
